# @todo: add mini-app tests
name: Run Tests

on:
  push:
    branches: [master]
    tags: ['*']
  pull_request:
    types: [opened, reopened, synchronize]

env:
  FOUNDRY_PROFILE: ci

permissions:
  contents: write

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          submodules: recursive

      - name: Ensure submodules are up to date
        run: git submodule update --init --recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install Forge dependencies
        run: |
          echo "Installing all forge dependencies..."
          forge install foundry-rs/forge-std --no-git
          forge install OpenZeppelin/openzeppelin-contracts --no-git
          forge install vectorized/solady --no-git
          echo "Verifying installations..."
          ls -la lib/forge-std/src/Script.sol || echo "forge-std Script.sol not found"
          ls -la lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol || echo "OpenZeppelin ERC721.sol not found"
          ls -la lib/solady/src/ || echo "solady not found"
        working-directory: contracts

      - name: Run Forge build
        run: |
          forge --version
          FOUNDRY_DISABLE_NIGHTLY_WARNING=1 FOUNDRY_PROFILE=CI forge build --sizes
        id: build
        continue-on-error: true
        working-directory: contracts

      - name: Run Forge tests
        run: |
          FOUNDRY_DISABLE_NIGHTLY_WARNING=1 FOUNDRY_PROFILE=CI forge test -vvv
        id: test
        working-directory: contracts

  node-tests:
    name: Tests App and Generator
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [generator, app]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          submodules: recursive
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: pnpm --filter "${{ matrix.package }}" run test
