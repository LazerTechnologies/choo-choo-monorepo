{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "AlreadyRodeTrain"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "CannotSendToCurrentPassenger"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ERC721EnumerableForbiddenBatchMint"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721IncorrectOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC721InsufficientApproval"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "approver",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721InvalidApprover"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721InvalidOperator"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721InvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721InvalidReceiver"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC721InvalidSender"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC721NonexistentToken"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC721OutOfBoundsIndex"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "reason",
            "type": "string"
          }
        ],
        "type": "error",
        "name": "NotEligibleToYoink"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotOwnerNorApproved"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotPreviousPassenger"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableInvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableUnauthorizedAccount"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferToInvalidAddress"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "approved",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Approval",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "ApprovalForAll",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "traits",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "TicketStamped",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "TrainDeparted",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Transfer",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "by",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Yoink",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "approve"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getTrainWhistle",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "hasBeenPassenger",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "caller",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isYoinkable",
        "outputs": [
          {
            "internalType": "bool",
            "name": "canYoink",
            "type": "bool"
          },
          {
            "internalType": "string",
            "name": "reason",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "lastTransferTimestamp",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "mainImage",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "mainTokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "nextStop"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "fullTokenURI",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "image",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "traits",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "ownerMintTicket"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "previousPassenger",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "safeTransferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "safeTransferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setApprovalForAll"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_mainImage",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMainImage"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_mainTokenURI",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMainTokenURI"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_whistle",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setTrainWhistle"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "ticketData",
        "outputs": [
          {
            "internalType": "string",
            "name": "tokenURI",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "image",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "traits",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "ticketMintedAt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "tokenByIndex",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "tokenOfOwnerByIndex",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "trainJourney",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "trainWhistle",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "yoink"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "approve(address,uint256)": {
          "details": "See {IERC721-approve}."
        },
        "balanceOf(address)": {
          "details": "See {IERC721-balanceOf}."
        },
        "getApproved(uint256)": {
          "details": "See {IERC721-getApproved}."
        },
        "getTrainWhistle()": {
          "returns": {
            "_0": "The base64-encoded sound data."
          }
        },
        "isApprovedForAll(address,address)": {
          "details": "See {IERC721-isApprovedForAll}."
        },
        "isYoinkable(address)": {
          "params": {
            "caller": "The address to check."
          },
          "returns": {
            "canYoink": "True if eligible, false otherwise.",
            "reason": "The reason for eligibility or ineligibility."
          }
        },
        "name()": {
          "details": "See {IERC721Metadata-name}."
        },
        "nextStop(address)": {
          "details": "ChooChoo-themed replacement for transfer/propagate. Only the train (tokenId 0) can be moved this way.",
          "params": {
            "to": "The address of the next passenger."
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "ownerMintTicket(address,string,string,string)": {
          "params": {
            "fullTokenURI": "The full base64-encoded metadata JSON for the ticket.",
            "image": "The base64-encoded image for the ticket.",
            "to": "The address to receive the ticket.",
            "traits": "The traits JSON for the ticket."
          }
        },
        "ownerOf(uint256)": {
          "details": "See {IERC721-ownerOf}."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "params": {
            "_data": "Additional data.",
            "from": "The address sending the token.",
            "to": "The address receiving the token.",
            "tokenId": "The tokenId to transfer."
          }
        },
        "setApprovalForAll(address,bool)": {
          "details": "See {IERC721-setApprovalForAll}."
        },
        "setMainImage(string)": {
          "params": {
            "_mainImage": "The new base64-encoded image."
          }
        },
        "setMainTokenURI(string)": {
          "params": {
            "_mainTokenURI": "The new base64-encoded tokenURI."
          }
        },
        "setTrainWhistle(string)": {
          "params": {
            "_whistle": "The new base64-encoded sound data."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "symbol()": {
          "details": "See {IERC721Metadata-symbol}."
        },
        "tokenByIndex(uint256)": {
          "details": "See {IERC721Enumerable-tokenByIndex}."
        },
        "tokenOfOwnerByIndex(address,uint256)": {
          "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
        },
        "tokenURI(uint256)": {
          "params": {
            "tokenId": "The tokenId to query."
          },
          "returns": {
            "_0": "The base64-encoded tokenURI."
          }
        },
        "totalSupply()": {
          "details": "See {IERC721Enumerable-totalSupply}."
        },
        "transferFrom(address,address,uint256)": {
          "params": {
            "from": "The address sending the token.",
            "to": "The address receiving the token.",
            "tokenId": "The tokenId to transfer."
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "yoink(address)": {
          "params": {
            "to": "The address to send the train to."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "constructor": {
          "notice": "Deploys the ChooChooTrain contract and mints the original train to the deployer."
        },
        "getTrainWhistle()": {
          "notice": "Returns the train whistle sound (base64-encoded audio file)."
        },
        "isYoinkable(address)": {
          "notice": "Checks if a passenger is eligible to yoink the train."
        },
        "nextStop(address)": {
          "notice": "Moves the train (tokenId 0) to the next passenger and stamps a ticket for the current passenger."
        },
        "ownerMintTicket(address,string,string,string)": {
          "notice": "Owner can mint a custom ticket (for airdrops, etc)."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "notice": "Standard ERC721 safeTransferFrom with data, supports both train and ticket transfers."
        },
        "setMainImage(string)": {
          "notice": "Sets the main image for the train NFT."
        },
        "setMainTokenURI(string)": {
          "notice": "Sets the main tokenURI for the train NFT."
        },
        "setTrainWhistle(string)": {
          "notice": "Sets the train whistle sound (base64-encoded audio file)."
        },
        "tokenURI(uint256)": {
          "notice": "Returns the tokenURI for a given tokenId (train or ticket)."
        },
        "transferFrom(address,address,uint256)": {
          "notice": "Standard ERC721 transferFrom, supports both train and ticket transfers."
        },
        "yoink(address)": {
          "notice": "Allows a previous passenger to yoink (rescue) the train to a new address if it is stuck."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
      "openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "solady-test/=lib/solady/test/",
      "solady/=lib/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 99999999
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "src/ChooChooTrain.sol": "ChooChooTrain"
    },
    "evmVersion": "shanghai",
    "libraries": {}
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
      "urls": [
        "bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
        "dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
      "keccak256": "0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a",
      "urls": [
        "bzz-raw://2c5ae6d85bd48cca8d6d2fcec8c63efd86f56f8a5832577a47e403ce0e65cb09",
        "dweb:/ipfs/QmUtcS8AbRSWhuc61puYet58os8FvSqm329ChoW8wwZXZk"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261",
      "urls": [
        "bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11",
        "dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
      "urls": [
        "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
        "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "keccak256": "0x5191f783af281c75b7de0f1e3e36cdc6ac5cb2358d929584c4953fd02fa2b5eb",
      "urls": [
        "bzz-raw://d3ca2689d95ba45e297e55c8f71112e3ccec701d0087cb5e1c6ecb1b9ce86f00",
        "dweb:/ipfs/QmNQ5xKxJpF9k7AahnmJYvg5XeGSYtRig2Lp2WHmWXyBze"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "keccak256": "0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de",
      "urls": [
        "bzz-raw://1f58c799bd939d3951c94893e83ef86acd56989d1d7db7f9d180c515e29e28ff",
        "dweb:/ipfs/QmTgAxHAAys4kq9ZfU9YB24MWYoHLGAKSxnYUigPFrNW7g"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
      "urls": [
        "bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
        "dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol": {
      "keccak256": "0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855",
      "urls": [
        "bzz-raw://746d295e403931aeb9d6065fd5a0871f43ab5459814a60623611e4b6641a09fd",
        "dweb:/ipfs/QmWrgT8YJrQ9FfD1o3YYArwo57e7MGdpFKuM74qJ4qE34E"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
      "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
      "urls": [
        "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
        "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
      "urls": [
        "bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
        "dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
      "urls": [
        "bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
        "dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
      "urls": [
        "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
        "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
      "urls": [
        "bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
        "dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
      "urls": [
        "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
        "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
      "urls": [
        "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
        "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
      ],
      "license": "MIT"
    },
    "src/ChooChooTrain.sol": {
      "keccak256": "0x7c4a8cc435aafc76d459ca86f95fe3b994eadf8091867cc7fa21d4202c18a6e6",
      "urls": [
        "bzz-raw://e336673d84e14e12a71d64df051eef6d5b0e24fd3538b0badb4946fb29cfed88",
        "dweb:/ipfs/QmQHkc8SHJy2qAVZfTTzdGYBUZXdD8MnfDeJKT2nY3hNfe"
      ],
      "license": "MIT",
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"openzeppelin-contracts/token/ERC721/ERC721.sol\";\nimport \"openzeppelin-contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"openzeppelin-contracts/access/Ownable.sol\";\nimport \"openzeppelin-contracts/utils/Strings.sol\";\n\n/*\nChoo-Choo on Base is an homage to The Worm. How many wallets can Choo Choo visit?\n\nChooChoo can visit new wallets using the `nextStop` function. When ChooChoo moves on to its next stop, the previous holder receives a \"ticket\" NFT as a souvenir.\n\nIf the train gets stuck, previous passengers can \"yoink\" the train after a certain time:\n- After 2 days of no movement, the immediate previous passenger can yoink.\n- After 3 days, any previous passenger can yoink.\n\n@author Jon Bray\n@warpcast https://warpcast.com/jonbray.eth\n@email me@jonbray.dev\n*/\ncontract ChooChooTrain is ERC721Enumerable, Ownable {\n    using Strings for uint256;\n\n    // ========== TRACKING ========== //\n    /// @dev All addresses that have ever held tokenId 0, in order.\n    address[] public trainJourney;\n    /// @dev The timestamp when each ticket was minted, for reconstructing the journey.\n    mapping(uint256 => uint256) public ticketMintedAt;\n\n    // Ticket data\n    struct TicketData {\n        string tokenURI; // full base64-encoded metadata JSON for NFT marketplaces\n        string image; // base64-encoded image (optional, for convenience)\n        string traits; // traits as JSON string (optional, for convenience)\n    }\n\n    mapping(uint256 => TicketData) public ticketData;\n\n    // Token ID tracker for tickets (starts at 1)\n    uint256 private nextTicketId = 1;\n\n    // ========== STATE ========== //\n    string public mainImage; // base64-encoded image\n    string public mainTokenURI; // base64-encoded JSON metadata\n    string public trainWhistle; // base64-encoded audio file\n\n    // Yoink mechanic state\n    uint256 public lastTransferTimestamp;\n    address public previousPassenger;\n    mapping(address => bool) public hasBeenPassenger;\n\n    // ========== EVENTS ========== //\n    /// @dev Emitted when a previous holder receives a ticket NFT.\n    event TicketStamped(address indexed to, uint256 indexed tokenId, string traits);\n\n    /// @dev Emitted when the main train NFT (tokenId 0) is transferred to a new passenger.\n    event TrainDeparted(address indexed from, address indexed to, uint256 timestamp);\n\n    /// @dev Emitted when a previous passenger yoinks the train to a new address.\n    event Yoink(address indexed by, address indexed to, uint256 timestamp);\n\n    // ========== ERRORS ========== //\n    /// @dev Caller is not the owner nor approved for the token.\n    error NotOwnerNorApproved();\n    /// @dev Address must have held the train before.\n    error NotPreviousPassenger();\n    /// @dev Only previous passengers can yoink.\n    error NotEligibleToYoink(string reason);\n    /// @dev Cannot mint or transfer to the zero address or dead address.\n    error TransferToInvalidAddress();\n    /// @dev Cannot send the train to yourself.\n    error CannotSendToCurrentPassenger();\n    /// @dev Cannot ride the train more than once.\n    error AlreadyRodeTrain();\n\n    // ========== CONSTANTS ========== //\n    /// @dev Commonly used burn address on Base.\n    address constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    // ========== MODIFIERS ========== //\n    modifier onlyPreviousPassengers() {\n        if (!(balanceOf(msg.sender) > 0 && msg.sender != ownerOf(0))) {\n            revert NotPreviousPassenger();\n        }\n        _;\n    }\n\n    modifier notInvalidAddress(address to) {\n        if (to == address(0) || to == DEAD_ADDRESS) {\n            revert TransferToInvalidAddress();\n        }\n        _;\n    }\n\n    // ========== CONSTRUCTOR ========== //\n    /**\n     * @notice Deploys the ChooChooTrain contract and mints the original train to the deployer.\n     */\n    constructor() ERC721(\"ChooChooTrain\", \"CHOOCHOO\") Ownable(msg.sender) {\n        _safeMint(msg.sender, 0);\n        lastTransferTimestamp = block.timestamp;\n        hasBeenPassenger[msg.sender] = true;\n        trainJourney.push(msg.sender);\n    }\n\n    // ========== TRANSFER LOGIC ========== //\n    /**\n     * @notice Moves the train (tokenId 0) to the next passenger and stamps a ticket for the current passenger.\n     * @dev ChooChoo-themed replacement for transfer/propagate. Only the train (tokenId 0) can be moved this way.\n     * @param to The address of the next passenger.\n     */\n    function nextStop(address to) external notInvalidAddress(to) {\n        if (!_isAuthorized(ownerOf(0), _msgSender(), 0)) {\n            revert NotOwnerNorApproved();\n        }\n        address from = ownerOf(0);\n        if (to == from) {\n            revert CannotSendToCurrentPassenger();\n        }\n        if (hasBeenPassenger[to]) {\n            revert AlreadyRodeTrain();\n        }\n        previousPassenger = from;\n        lastTransferTimestamp = block.timestamp;\n        hasBeenPassenger[to] = true;\n        _safeTransfer(from, to, 0, \"\");\n        trainJourney.push(to);\n        emit TrainDeparted(from, to, block.timestamp);\n        _stampTicket(from);\n    }\n\n    /**\n     * @notice Internal transfer handler for all token transfers.\n     * @dev Handles both train and ticket transfers. Only the train triggers ticket stamping and state updates.\n     */\n    function _customTransfer(address from, address to, uint256 tokenId, bytes memory _data)\n        internal\n        notInvalidAddress(to)\n    {\n        // Prevent previous passengers from receiving the train again\n        if (tokenId == 0 && hasBeenPassenger[to]) {\n            revert AlreadyRodeTrain();\n        }\n        if (tokenId == 0) {\n            if (!_isAuthorized(ownerOf(tokenId), _msgSender(), tokenId)) {\n                revert NotOwnerNorApproved();\n            }\n            if (to == from) {\n                revert CannotSendToCurrentPassenger();\n            }\n            previousPassenger = from;\n            lastTransferTimestamp = block.timestamp;\n            hasBeenPassenger[to] = true;\n            _safeTransfer(from, to, tokenId, _data);\n            trainJourney.push(to);\n            emit TrainDeparted(from, to, block.timestamp);\n            _stampTicket(from);\n        } else {\n            if (!_isAuthorized(ownerOf(tokenId), _msgSender(), tokenId)) {\n                revert NotOwnerNorApproved();\n            }\n            _safeTransfer(from, to, tokenId, _data);\n        }\n    }\n\n    /**\n     * @notice Standard ERC721 transferFrom, supports both train and ticket transfers.\n     * @param from The address sending the token.\n     * @param to The address receiving the token.\n     * @param tokenId The tokenId to transfer.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) {\n        _customTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @notice Standard ERC721 safeTransferFrom with data, supports both train and ticket transfers.\n     * @param from The address sending the token.\n     * @param to The address receiving the token.\n     * @param tokenId The tokenId to transfer.\n     * @param _data Additional data.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data)\n        public\n        override(ERC721, IERC721)\n    {\n        _customTransfer(from, to, tokenId, _data);\n    }\n\n    // ========== TICKET MINTING ========== //\n    /**\n     * @notice Stamps a ticket (mints a ticket NFT) for a passenger.\n     * @dev Called internally when the train moves to a new passenger.\n     * @param to The address of the passenger receiving the ticket.\n     */\n    function _stampTicket(address to) internal notInvalidAddress(to) {\n        string memory defaultTokenURI = \"\"; // @todo: add default tokenURI\n        string memory defaultImage = \"\"; // @todo: add default image\n        string memory defaultTraits = \"{}\";\n        uint256 tokenId = nextTicketId;\n        _safeMint(to, tokenId);\n        ticketData[tokenId] = TicketData({tokenURI: defaultTokenURI, image: defaultImage, traits: defaultTraits});\n        ticketMintedAt[tokenId] = block.timestamp;\n        nextTicketId++;\n        emit TicketStamped(to, tokenId, defaultTraits);\n    }\n\n    /**\n     * @notice Owner can mint a custom ticket (for airdrops, etc).\n     * @param to The address to receive the ticket.\n     * @param fullTokenURI The full base64-encoded metadata JSON for the ticket.\n     * @param image The base64-encoded image for the ticket.\n     * @param traits The traits JSON for the ticket.\n     */\n    function ownerMintTicket(address to, string memory fullTokenURI, string memory image, string memory traits)\n        external\n        onlyOwner\n        notInvalidAddress(to)\n    {\n        uint256 tokenId = nextTicketId;\n        _safeMint(to, tokenId);\n        ticketData[tokenId] = TicketData({tokenURI: fullTokenURI, image: image, traits: traits});\n        ticketMintedAt[tokenId] = block.timestamp;\n        nextTicketId++;\n        emit TicketStamped(to, tokenId, traits);\n    }\n\n    // ========== OWNER CONTROLS ========== //\n    /**\n     * @notice Sets the main image for the train NFT.\n     * @param _mainImage The new base64-encoded image.\n     */\n    function setMainImage(string memory _mainImage) external onlyOwner {\n        mainImage = _mainImage;\n    }\n    /**\n     * @notice Sets the main tokenURI for the train NFT.\n     * @param _mainTokenURI The new base64-encoded tokenURI.\n     */\n\n    function setMainTokenURI(string memory _mainTokenURI) external onlyOwner {\n        mainTokenURI = _mainTokenURI;\n    }\n    /**\n     * @notice Sets the train whistle sound (base64-encoded audio file).\n     * @param _whistle The new base64-encoded sound data.\n     */\n\n    function setTrainWhistle(string memory _whistle) external onlyOwner {\n        trainWhistle = _whistle;\n    }\n\n    /**\n     * @notice Returns the train whistle sound (base64-encoded audio file).\n     * @return The base64-encoded sound data.\n     */\n    function getTrainWhistle() external view returns (string memory) {\n        return trainWhistle;\n    }\n\n    // ========== YOINK MECHANIC ========== //\n    /**\n     * @notice Checks if a passenger is eligible to yoink the train.\n     * @param caller The address to check.\n     * @return canYoink True if eligible, false otherwise.\n     * @return reason The reason for eligibility or ineligibility.\n     */\n    function isYoinkable(address caller) public view returns (bool canYoink, string memory reason) {\n        if (balanceOf(caller) == 0 || caller == ownerOf(0)) {\n            return (false, \"Caller is not a previous passenger\");\n        }\n        if (block.timestamp < lastTransferTimestamp + 2 days) {\n            return (false, \"Yoink not available yet\");\n        }\n        if (block.timestamp < lastTransferTimestamp + 3 days) {\n            if (caller == previousPassenger) {\n                return (true, \"Last passenger can yoink\");\n            } else {\n                return (false, \"Only last passenger can yoink at this time\");\n            }\n        } else {\n            if (hasBeenPassenger[caller]) {\n                return (true, \"Any previous passenger can yoink\");\n            } else {\n                return (false, \"Caller never held the train\");\n            }\n        }\n    }\n\n    /**\n     * @notice Allows a previous passenger to yoink (rescue) the train to a new address if it is stuck.\n     * @param to The address to send the train to.\n     */\n    function yoink(address to) external onlyPreviousPassengers notInvalidAddress(to) {\n        (bool canYoink, string memory reason) = isYoinkable(msg.sender);\n        if (!canYoink) {\n            revert NotEligibleToYoink(reason);\n        }\n        address from = ownerOf(0);\n        if (to == from) {\n            revert CannotSendToCurrentPassenger();\n        }\n        previousPassenger = from;\n        lastTransferTimestamp = block.timestamp;\n        hasBeenPassenger[to] = true;\n        _safeTransfer(from, to, 0, \"\");\n        trainJourney.push(to);\n        emit TrainDeparted(from, to, block.timestamp);\n        _stampTicket(from);\n        emit Yoink(msg.sender, to, block.timestamp);\n    }\n\n    // ========== METADATA ========== //\n    /**\n     * @notice Returns the tokenURI for a given tokenId (train or ticket).\n     * @param tokenId The tokenId to query.\n     * @return The base64-encoded tokenURI.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        if (tokenId == 0) {\n            return mainTokenURI;\n        } else {\n            return ticketData[tokenId].tokenURI;\n        }\n    }\n}\n"
    }
  },
  "version": 1
}
